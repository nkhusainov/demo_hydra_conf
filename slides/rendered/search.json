[
  {
    "objectID": "slides.html#hydra",
    "href": "slides.html#hydra",
    "title": "Hydra",
    "section": "Hydra",
    "text": "Hydra\n\n\n\nhttps://hydra.cc/\nHydra is an open-source Python framework that simplifies the development of research and other complex applications. The key feature is the ability to don’t read this, blahblah blah create a hierarchical blah blahblag realy, don’t read this, it is not that interesting blahblah blah. The name Hydra comes from its ability to run multiple similar jobs - much like a Hydra with multiple heads.\n\n\nKey features\n\nHierarchical configuration composable from multiple sources\nConfiguration can be specified or overridden from the command line\n\n\n\nWhen to use it ?\n\nYou can scroll your config-file during 2 seconds\nYou are adapting configs according to envs, pipelines, etc.\nIt’s only you who understands what is happening in the configs"
  },
  {
    "objectID": "slides.html#simple-example",
    "href": "slides.html#simple-example",
    "title": "Hydra",
    "section": "Simple Example",
    "text": "Simple Example\n\n\n# simple variable definition\nvar_1: hello\nvar_2: world\n\n# referencing\nvar_constr: ${var_1}_${var_2}\n\n# dictionary\nmy_dict:\n  key_1: ${var_1}\n  key_2: ${var_2}\n\n# list\nmy_list:\n  - ${var_1}\n  - ${var_2}\n\n# env variable\nhostname: ${oc.env:HOSTNAME}\npassword: ${oc.env:PASSWORD}\n\n# environment dependent variables\nenvironment: dev\ngcp_project_options:\n  dev: dev-project\n  prod: prod-project\n\ngcp_project: ${gcp_project_options.${environment}}"
  },
  {
    "objectID": "slides.html#simple-example.-access-variables",
    "href": "slides.html#simple-example.-access-variables",
    "title": "Hydra",
    "section": "Simple Example. Access variables",
    "text": "Simple Example. Access variables\n\n\n\n# src/main.py\n\nimport hydra\nfrom omegaconf import DictConfig, OmegaConf\n\n@hydra.main(\n    version_base=None,\n    config_path=\"conf\",\n    config_name=\"config\",\n)\ndef my_app(cfg : DictConfig) -&gt; None:\n    OmegaConf.resolve(cfg)\n    print(OmegaConf.to_yaml(cfg))\n\n\nif __name__ == \"__main__\":\n    my_app()\n\n\n\nSimple execution\npython main.py\n\n\nChange or add variables at runtime !\npython main.py var_1=bonjour var_2=le_monde\n\n\n\n\ns"
  },
  {
    "objectID": "slides.html#realistic-example.-diferent-configs-between-usecases",
    "href": "slides.html#realistic-example.-diferent-configs-between-usecases",
    "title": "Hydra",
    "section": "Realistic example. Diferent configs between Usecases",
    "text": "Realistic example. Diferent configs between Usecases\n\n\n\n# CASE 1\n# src/conf/usecases/case_1.yaml\n\nmodel:\n  parameters:\n    objective: binary\n    is_unbalance: True\n    extra_trees: False\n    boosting_type: gbdt\n    feature_fraction: 0.6\n    feature_fraction_bynode: 0.95\n    learning_rate: 0.034744\n  features:\n    categorical:\n      - cat_1\n    numerical:\n      - num_1\n      - num_2\n      - num_3\n      - num_4\n      - num_5\n      - num_6\n    target: my_target_column\n\npipeline_variables:\n  gcp_project_options:\n    dev: dev-case_2-project\n    prod: prod-case_2-project\n\n  options_table_features:\n    dev: \"case_2_dataset.features_table\"\n    prd: ${.dev}\n\n  schedule: \"0 0 * * *\"\n\n\n\n# CASE 2\n# src/conf/usecases/case_2.yaml\n\nmodel:\n  parameters:\n    objective: binary\n    is_unbalance: True\n    extra_trees: False\n    boosting_type: gbdt\n    min_data_in_bin: 885\n    min_data_in_leaf: 595\n    num_leaves: 475\n    sigmoid: 8.3\n    num_iterations: 290\n  features:\n    categorical:\n      - cat_1\n    numerical:\n      - num_1\n      - num_2\n      - num_3\n      - num_4\n      - num_5\n      - num_6\n    target: my_target_column\n\npipeline_variables:\n  gcp_project_options:\n    dev: dev-case_1-project\n    prod: prod-case_1-project\n\n  options_table_features:\n    dev: \"case_1_dataset.features_table\"\n    prd: ${.dev}\n\n  schedule: \"0 0 * * *\"\n\n\n\n# CASE 3\n# src/conf/usecases/case_3.yaml\n\nmodel:\n  parameters:\n    objective: binary\n    is_unbalance: True\n    extra_trees: False\n    boosting_type: gbdt\n    feature_fraction: 0.6\n    feature_fraction_bynode: 0.95\n    learning_rate: 0.034744\n    max_bin: 107\n    max_depth: 8\n    min_data_in_bin: 885\n    min_data_in_leaf: 595\n    num_leaves: 475\n    sigmoid: 8.3\n    num_iterations: 290\n  features:\n    categorical:\n      - cat_1\n      - cat_2\n      - cat_3\n      - cat_4\n      - cat_5\n    numerical:\n      - num_1\n    target: my_target_column\n\npipeline_variables:\n  gcp_project_options:\n    dev: dev-case_3-project\n    prod: prod-case_3-project\n\n  options_table_features:\n    dev: \"case_3_dataset.features_table\"\n    prd: ${.dev}\n\n  schedule: \"0 0 * * *\""
  },
  {
    "objectID": "slides.html#realistic-example",
    "href": "slides.html#realistic-example",
    "title": "Hydra",
    "section": "Realistic example",
    "text": "Realistic example\n\n\n\n\n\n\n\n\n\n\n\npython main.py\n\n\nImporting another config\npython main.py usecase=case_2 environment=prod\n\n\n\n\n# MAIN CONFIG\n# src/conf/config.yaml\n\ndefaults:\n  - usecase: case_1\n\nenvironment: ${oc.env:ENVIRONMENT}\ngcp_project: ${usecase.pipeline_variables.gcp_project_options.${environment}}"
  },
  {
    "objectID": "slides.html#a-more-realistic-example",
    "href": "slides.html#a-more-realistic-example",
    "title": "Hydra",
    "section": "A more realistic example",
    "text": "A more realistic example\nWe don’t want to repeat the same config multiple times.\n\n\n# CASE 1\n# src/conf/usecases/case_1.yaml\n\nmodel:\n  parameters:\n    objective: binary\n    is_unbalance: True\n    extra_trees: False\n    boosting_type: gbdt\n    feature_fraction: 0.6\n    feature_fraction_bynode: 0.95\n    learning_rate: 0.034744\n  features:\n    categorical:\n      - cat_1\n    numerical:\n      - num_1\n      - num_2\n      - num_3\n      - num_4\n      - num_5\n      - num_6\n    target: my_target_column\n\npipeline_variables:\n  gcp_project_options:\n    dev: dev-case_2-project\n    prod: prod-case_2-project\n\n  options_table_features:\n    dev: \"case_2_dataset.features_table\"\n    prd: ${.dev}\n\n  schedule: \"0 0 * * *\"\n\n# CASE 2\n# src/conf/usecases/case_2.yaml\n\nmodel:\n  parameters:\n    objective: binary\n    is_unbalance: True\n    extra_trees: False\n    boosting_type: gbdt\n    feature_fraction: 0.6\n    feature_fraction_bynode: 0.95\n    learning_rate: 0.034744\n    min_data_in_bin: 885\n    min_data_in_leaf: 595\n    num_leaves: 475\n    sigmoid: 8.3\n    num_iterations: 290\n  features:\n    categorical:\n      - cat_1\n    numerical:\n      - num_1\n      - num_2\n      - num_3\n      - num_4\n      - num_5\n      - num_6\n    target: my_target_column\n\npipeline_variables:\n  gcp_project_options:\n    dev: dev-case_1-project\n    prod: prod-case_1-project\n\n  options_table_features:\n    dev: \"case_1_dataset.features_table\"\n    prd: ${.dev}\n\n  schedule: \"0 0 * * *\"\n\n# CASE 3\n# src/conf/usecases/case_3.yaml\n\nmodel:\n  parameters:\n    objective: binary\n    is_unbalance: True\n    extra_trees: False\n    boosting_type: gbdt\n    feature_fraction: 0.6\n    feature_fraction_bynode: 0.95\n    learning_rate: 0.034744\n    max_bin: 107\n    max_depth: 8\n    min_data_in_bin: 885\n    min_data_in_leaf: 595\n    num_leaves: 475\n    sigmoid: 8.3\n    num_iterations: 290\n  features:\n    categorical:\n      - cat_1\n      - cat_2\n      - cat_3\n      - cat_4\n      - cat_5\n    numerical:\n      - num_1\n    target: my_target_column\n\npipeline_variables:\n  gcp_project_options:\n    dev: dev-case_3-project\n    prod: prod-case_3-project\n\n  options_table_features:\n    dev: \"case_3_dataset.features_table\"\n    prd: ${.dev}\n\n  schedule: \"0 0 * * *\""
  },
  {
    "objectID": "slides.html#a-more-realistic-example.-config-templating",
    "href": "slides.html#a-more-realistic-example.-config-templating",
    "title": "Hydra",
    "section": "A more realistic example. Config Templating",
    "text": "A more realistic example. Config Templating\nWe have multiple templates. (e.g Train / Infer)\n\n\n# DEFAULT CONFIG\n# src/conf/usecases/default.yaml\n\nmodel:\n  parameters:\n    objective: binary\n    is_unbalance: True\n    extra_trees: False\n    boosting_type: gbdt\n    feature_fraction: 0.6\n    feature_fraction_bynode: 0.95\n    learning_rate: 0.034744\n  features:\n    categorical:\n      - cat_1\n      - cat_2\n    numerical:\n      - num_1\n      - num_2\n    target: my_target_column\n\npipeline_variables:\n  gcp_project_options:\n    dev: ???\n    prod: ???\n\n  options_table_features:\n    dev: ???\n    prd: ${.dev}\n\n  schedule: ???\n\n# CASE 1\n# src/conf/usecases/case_1.yaml\n\ndefaults:\n  - default\n  - _self_\n\nmodel:\n  features:\n    numerical:\n      - num_3\n      - num_4\n\npipeline_variables:\n  gcp_project_options:\n    dev: dev-case_1-project\n    prod: prod-case_1-project\n\n  options_table_features:\n    dev: \"case_1_dataset.features_table\"\n    prd: ${.dev}\n\n  schedule: \"0 0 * * *\"\n\n# MAIN CONFIG\n# src/conf/config.yaml\n\ndefaults:\n  - usecase: case_1\n  - _self_\n\nenvironment: ${oc.env:ENVIRONMENT}\ngcp_project: ${usecase.pipeline_variables.gcp_project_options.${environment}}\n\nRun:\npython main.py"
  },
  {
    "objectID": "slides.html#even-more-realistic-example.-config-templating",
    "href": "slides.html#even-more-realistic-example.-config-templating",
    "title": "Hydra",
    "section": "Even more realistic example. Config Templating",
    "text": "Even more realistic example. Config Templating\n\n\n\n\n\n\n\n\n\n\nZenML Resources. Train\n# conf/default/pipeline_options/train.yaml\n\nstep_configurations:\n  read_data_fit:\n    settings:\n      resources:\n        cpu_count: 8.0\n        memory: 128GiB\n  read_data_test:\n    settings:\n      resources:\n        cpu_count: 8.0\n        memory: 128GiB\n  split_data:\n    settings:\n      resources:\n        cpu_count: 8.0\n        memory: 256GiB\n  train_model:\n    settings:\n      resources:\n        cpu_count: 32.0\n        memory: 256GiB\n  infer_model_train:\n    settings:\n      resources:\n        cpu_count: 8.0\n        memory: 256GiB\n  infer_model_test:\n    settings:\n      resources:\n        cpu_count: 8.0\n        memory: 256GiB\n  infer_model_fit:\n    settings:\n      resources:\n        cpu_count: 8.0\n        memory: 256GiB\n  infer_model_validate:\n    settings:\n      resources:\n        cpu_count: 8.0\n        memory: 128GiB\n  evaluate_train:\n    settings:\n      resources:\n        cpu_count: 8.0\n        memory: 128GiB\n  evaluate_test:\n    settings:\n      resources:\n        cpu_count: 8.0\n        memory: 128GiB\n  evaluate_fit:\n    settings:\n      resources:\n        cpu_count: 8.0\n        memory: 128GiB\n  evaluate_validate:\n    settings:\n      resources:\n        cpu_count: 8.0\n        memory: 128GiB\n  eval_by_snapshot_test:\n    settings:\n      resources:\n        cpu_count: 8.0\n        memory: 128GiB\n  eval_by_snapshot_fit:\n    settings:\n      resources:\n        cpu_count: 8.0\n        memory: 128GiB\n  rotate_models:\n    settings:\n      resources:\n        cpu_count: 2.0\n        memory: 2GiB\n  report_overal:\n    settings:\n      resources:\n        cpu_count: 2.0\n        memory: 2GiB\n\n\nZenML Resources. Infer\n# conf/default/pipeline_options/infer.yaml\n\nstep_configurations:\n  read_data_infer:\n    settings:\n      resources:\n        cpu_count: 8\n        memory: \"64GiB\"\n  infer_model:\n    settings:\n      resources:\n        cpu_count: 8\n        memory: \"64GiB\"\n\n\nZenML Docker. Python 3.10\n# conf/default/zenml_settings/3-10.yaml\n\ndocker:\n  parent_image: \"path.jfrog.io/.../zenml-adeomlflow-py3.10:0.33.0\"\n  replicate_local_python_environment:\n    - \"poetry\"\n    - \"export\"\n    - \"--without=dev\"\n    - \"--extras=vertex\"\n    - \"--extras=ds_default\"\n    - \"--format=requirements.txt\"\n  dockerignore: \"../.dockerignore\"\n  install_stack_requirements: False\n  apt_packages:\n    - libgomp1\n  environment:\n    PYTHONWARNINGS: \"ignore\"\n    NUMEXPR_MAX_THREADS: \"128\"\n    HYDRA_FULL_ERROR: 1\n  source_files: \"include\"\n  python_package_installer: \"uv\"\n\n\nZenML Docker. Python 3.11\n# conf/default/zenml_settings/3-11.yaml\n\ndocker:\n  parent_image: \"path.jfrog.io/.../zenml-adeomlflow-py3.11:0.33.0\"\n  replicate_local_python_environment:\n    - \"poetry\"\n    - \"export\"\n    - \"--without=dev\"\n    - \"--extras=vertex\"\n    - \"--extras=ds_default\"\n    - \"--format=requirements.txt\"\n  dockerignore: \"../.dockerignore\"\n  install_stack_requirements: False\n  apt_packages:\n    - libgomp1\n  environment:\n    PYTHONWARNINGS: \"ignore\"\n    NUMEXPR_MAX_THREADS: \"128\"\n    HYDRA_FULL_ERROR: 1\n  source_files: \"include\"\n  python_package_installer: \"uv\"\n\n\nPipeline Step Configs. Train\n# conf/default/pipeline_kwargs/train.yaml\n\nmodel_id: ???\nmodel_stage: Production\nmodel_target_metric: pr_auc\nmodel_metric_lower_better: False\nmetrics_threshold: 0.01\n\nmodel_conf: ???\nfeatures_conf: ${.model_conf.features}\n\nmodel_registry_conf:\n  _target_: flavors.model_registry.mlflow_registry.MLFlowModelRegistry\n\ndata_reader_fit_conf:\n  _target_: flavors.data_reader.bq.SnapshotBQDataReader\n  table_ref: ${vars.table_features_ref}\n  project_id: ${vars.project_id}\n  column_id: ${vars.column_id}\n  column_snapshot_date: ${vars.column_snapshot_date}\n  column_snaphot_id: ${vars.column_snaphot_id}\n  column_target: ${..model_conf.column_target}\n  snaphots_range: [5,6]\n\ndata_reader_test_conf:\n  _target_: flavors.data_reader.bq.SnapshotBQDataReader\n  table_ref: ${vars.table_features_ref}\n  project_id: ${vars.project_id}\n  column_id: ${vars.column_id}\n  column_snapshot_date: ${vars.column_snapshot_date}\n  column_snaphot_id: ${vars.column_snaphot_id}\n  column_target: ${..model_conf.column_target}\n  snaphots_range: [3,4]\n\ndata_splitter_conf:\n  _target_: flavors.data_splitter.snapshot_balanced_splitter.SnapshotBalancedSplitter\n  column_id: ${vars.column_id}\n  column_snapshot: ${vars.column_snaphot_id}\n  ratio: 0.3\n  column_target: ${..model_conf.column_target}\n\ndo_hpo: False\nhpo_conf:\n  _target_: flavors.hpo.optuna.OptunaHandler\n  path: \"\"\n\nmodel_inferer_conf:\n  _target_: flavors.model_inferer.default.ModelInferer\n  column_prediction: ${vars.column_prediction}\n  column_model_id: ${vars.column_model_id}\n  columns_keep:\n    - ${vars.column_id}\n    - ${vars.column_snapshot_date}\n    - ${vars.column_snaphot_id}\n  column_target: ${..model_conf.column_target}\n\nevaluator_conf:\n  _target_: flavors.evaluator.generic.Evaluator\n  column_target: ${..model_conf.column_target}\n  column_prediction: ${vars.column_prediction}\n  metric_calculators:\n    - _target_: flavors.evaluator.metrics_calculator.generic.MetricsCalculator\n      metric_functions:\n        pr_auc:\n          _target_: flavors.evaluator.custom_metrics.pr_auc.CustomPrecisionRecallAUC\n          _partial_: false\n\n  thresholded_metric_calculators:\n    - _target_: flavors.evaluator.metrics_calculator.generic.ThresholdedMetricsCalculator\n      metric_functions:\n        precision_score:\n          _target_: sklearn.metrics.precision_score\n          _partial_: true\n        recall_score:\n          _target_: sklearn.metrics.recall_score\n          _partial_: true\n        accuracy_score:\n          _target_: sklearn.metrics.accuracy_score\n          _partial_: true\n        f1_score:\n          _target_: sklearn.metrics.f1_score\n          _partial_: true\n\n  plots:\n    density_curve:\n      _target_: flavors.evaluator.plots.generic.DensityCurvePlot\n      _partial_: true\n    pr_curve:\n      _target_: flavors.evaluator.plots.generic.PRCurvePlot\n      _partial_: true\n\nevaluator_group_conf:\n  _target_: flavors.evaluator.generic.GroupedEvaluator\n  columns_groupby: ${vars.column_snapshot_date}\n  column_target: ${..model_conf.column_target}\n  column_prediction: ${vars.column_prediction}\n  metric_calculators:\n    _target_: flavors.evaluator.metrics_calculator.generic.MetricsCalculator\n    metric_functions:\n      pr_auc:\n        _target_: flavors.evaluator.custom_metrics.pr_auc.CustomPrecisionRecallAUC\n        _partial_: false\n\n\nPipeline Step Configs. Infer\n# conf/default/pipeline_kwargs/infer.yaml\n\nmodel_id: model_id\nmodel_stage: Production\n\nmodel_conf: ???\n\nfeatures_conf: ${.model_conf.features}\n\nmodel_registry_conf:\n  _target_: flavors.model_registry.mlflow_registry.MLFlowModelRegistry\n\ndata_reader_infer_conf:\n  _target_: flavors.data_reader.bq.SnapshotBQDataReader\n  table_ref: ${vars.table_features_ref}\n  project_id: ${vars.project_id}\n  column_id: ${vars.column_id}\n  column_snapshot_date: ${vars.column_snapshot_date}\n  column_snaphot_id: ${vars.column_snaphot_id}\n  column_target: ${..model_conf.column_target}\n  snaphots_range: [1,1]\n\nmodel_inferer_conf:\n  _target_: flavors.model_inferer.default.ModelInferer\n  column_prediction: ${vars.column_prediction}\n  column_model_id: ${vars.column_model_id}\n  columns_keep:\n    - ${vars.column_id}\n    - ${vars.column_snapshot_date}\n    - ${vars.column_snaphot_id}\n\ndata_writer_conf:\n  _target_: flavors.data_writer.bq.BQDataWriter\n  project_id: ${vars.project_id}\n  table_ref: ${vars.table_scores_ref}\n  column_timestamp: ${vars.column_timestamp}\n  columns:\n    - ${vars.column_id}\n    - ${vars.column_snapshot_date}\n    - ${vars.column_prediction}\n    - ${vars.column_model_id}\n    - ${vars.column_timestamp}"
  },
  {
    "objectID": "slides.html#even-more-realistic-example.-config-templating-1",
    "href": "slides.html#even-more-realistic-example.-config-templating-1",
    "title": "Hydra",
    "section": "Even more realistic example. Config Templating",
    "text": "Even more realistic example. Config Templating\n\n\n\n\n\n\n\n\n\n# conf/default/pipeline_options/train.yaml\n\ndefaults:\n  - pipeline: train\n  - model@pipeline.kwargs.model_conf: model\n  - default/zenml_settings@pipeline.settings: 3-10\n  - default/vars@vars\n  - vars@vars\n  - _self_\n\nhydra:\n  searchpath: # add extra paths to the search path\n    - file://. # src/\n    - file://./conf/\n\nenvironment: dev"
  }
]